name: Deploy to Server

on:
  push:
    branches:
      - main

  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install --no-root

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.DEPLOY_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ghcr.io/ilyasvinarenko/mysite:${{ github.sha }}
            ghcr.io/ilyasvinarenko/mysite:latest

      - name: Deploy to server
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_LOGIN: ${{ secrets.SERVER_LOGIN }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          DEPLOY_TOKEN: ${{ secrets.DEPLOY_TOKEN }}
          DB_URL: ${{ secrets.DB_URL }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          mkdir -p ~/.ssh
          ssh-keyscan -H $SERVER_IP >> ~/.ssh/known_hosts

          # Увеличиваем таймауты SSH и разбиваем команды на части
          SSH_OPTS="-o ConnectTimeout=30 -o ServerAliveInterval=60 -o ServerAliveCountMax=5"

          # Логинимся в GitHub Container Registry
          ssh $SSH_OPTS -i private_key.pem $SERVER_LOGIN@$SERVER_IP "
            echo '$DEPLOY_TOKEN' | sudo docker login ghcr.io -u ilyasvinarenko --password-stdin
          "

          # Останавливаем и удаляем старый контейнер
          ssh $SSH_OPTS -i private_key.pem $SERVER_LOGIN@$SERVER_IP "
            sudo docker stop mysite || true
            sudo docker rm mysite || true
          "

          # Запускаем новый контейнер
          ssh $SSH_OPTS -i private_key.pem $SERVER_LOGIN@$SERVER_IP "
            sudo docker run -d \
              --name mysite \
              --network=app-network \
              -e DB_URL='$DB_URL' \
              -e SECRET_KEY='$SECRET_KEY' \
              -p 8000:8000 \
              ghcr.io/ilyasvinarenko/mysite:${{ github.sha }}
          "

          # Очищаем временные файлы
          rm -f private_key.pem